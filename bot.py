import os
import urllib.parse
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

from database import User, SessionLocal, init_db

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=kb)


@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contact_handler(msg: types.Message):
    phone = msg.contact.phone_number
    user_id = msg.from_user.id

    async with SessionLocal() as session:
        existing_user = await session.get(User, user_id)
        if not existing_user:
            new_user = User(telegram_id=user_id, phone=phone)
            session.add(new_user)
            await session.commit()

    await show_main_menu(msg)


async def show_main_menu(msg: types.Message):
    uid = msg.from_user.id
    planner_url = f"https://yourdomain.com/planner?uid={uid}"

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data="note"),
        InlineKeyboardButton("‚è∞ –ë—É–¥–∏–ª—å–Ω–∏–∫", callback_data="alarm")
    )
    kb.add(
        InlineKeyboardButton("üìÖ –ü–ª–∞–Ω–µ—Ä", url=planner_url),
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "note")
async def note_callback(call: types.CallbackQuery):
    url = "shortcuts://run-shortcut?" + urllib.parse.urlencode({
        "name": "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
        "input": "text",
        "text": "–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞"
    })
    await call.message.answer(f"–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:\n{url}")


@dp.callback_query_handler(lambda c: c.data == "alarm")
async def alarm_callback(call: types.CallbackQuery):
    url = "shortcuts://run-shortcut?" + urllib.parse.urlencode({
        "name": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫",
        "input": "text",
        "text": "08:00 | –ü—Ä–æ—Å–Ω—É—Ç—å—Å—è"
    })
    await call.message.answer(f"–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞:\n{url}")


@dp.callback_query_handler(lambda c: c.data == "profile")
async def profile_callback(call: types.CallbackQuery):
    user_id = call.from_user.id
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nTelegram ID: {user.telegram_id}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤: 1"
        else:
            text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    await call.message.answer(text)


# ‚úÖ –í–û–¢ –ó–î–ï–°–¨ –ù–ê–°–¢–û–Ø–©–ê–Ø –ú–ê–ì–ò–Ø:
async def on_startup(dp):
    await init_db()

if __name__ == "__main__":
    # –£–ë–†–ê–õ asyncio.run(), –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ ‚Äî init_db() —á–µ—Ä–µ–∑ on_startup
    executor.start_polling(dp, on_startup=on_startup)
