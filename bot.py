import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, Contact
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from sqlalchemy import select
from dotenv import load_dotenv

from database import init_db, async_session
from models import User

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in .env")

bot = Bot(token=TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
start_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
    ],
    resize_keyboard=True
)

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ó–∞–º–µ—Ç–∫–∞"), KeyboardButton(text="‚è∞ –ë—É–¥–∏–ª—å–Ω–∏–∫")],
        [KeyboardButton(text="üìÖ –ü–ª–∞–Ω–µ—Ä"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
    ],
    resize_keyboard=True
)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚¨áÔ∏è", reply_markup=start_kb)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contact_handler(message: types.Message):
    contact: Contact = message.contact
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            user.phone = contact.phone_number
        else:
            user = User(telegram_id=user_id, phone=contact.phone_number)
            session.add(user)

        await session.commit()

    await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω! –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üìù –ó–∞–º–µ—Ç–∫–∞")
async def note_handler(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–ø–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞).")

@dp.message_handler(lambda m: m.text == "‚è∞ –ë—É–¥–∏–ª—å–Ω–∏–∫")
async def alarm_handler(message: Message):
    await message.answer("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞).")

@dp.message_handler(lambda m: m.text == "üìÖ –ü–ª–∞–Ω–µ—Ä")
async def planner_handler(message: Message):
    await message.answer("–ü–ª–∞–Ω–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n(–∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ –±—É–¥—É—â–µ–µ)")

@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()

    if user:
        await message.answer(
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"Telegram ID: <code>{user.telegram_id}</code>\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{user.phone}</code>"
        )
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def on_startup(_):
    await init_db()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)
